#!/usr/bin/env python3
"""
Test espec√≠fico para verificar que el sistema cite las URLs originales de las propiedades.
Requisito del coding challenge.
"""
import os
import sys
import time
import re
from pathlib import Path

# Configuraci√≥n optimizada
os.environ["USE_LOCAL_MODELS"] = "true"
os.environ["USE_GPU"] = "true"
os.environ["GPU_LAYERS"] = "25"

# Add project root to Python path
sys.path.insert(0, str(Path(__file__).parent.parent))

def test_url_citation():
    """Test para verificar que se citen las URLs originales."""
    print("üîó TEST DE CITACI√ìN DE URLs ORIGINALES")
    print("=" * 55)
    print("Verificando requisito del coding challenge: citar URLs")
    print()
    
    try:
        from src.rag.property_rag_chain import create_rag_chain_from_scraped_data
        
        print("ü§ñ Inicializando RAG con citaci√≥n de URLs...")
        start_time = time.time()
        rag_chain = create_rag_chain_from_scraped_data()
        init_time = time.time() - start_time
        
        print(f"‚úÖ Inicializado en {init_time:.2f}s")
        
        # Preguntas que deber√≠an retornar propiedades espec√≠ficas con URLs
        test_questions = [
            "Mu√©strame 2 departamentos en Independencia",
            "¬øHay propiedades de 1 dormitorio disponibles?",
            "¬øQu√© departamentos cuestan menos de 160000 pesos?",
            "Dame 3 propiedades con sus detalles",
            "¬øCu√°les son las propiedades m√°s baratas?"
        ]
        
        print(f"\nüîó Probando {len(test_questions)} preguntas para citaci√≥n...\n")
        
        results = []
        for i, question in enumerate(test_questions, 1):
            print(f"‚ùì {i}. {question}")
            
            start_time = time.time()
            answer = rag_chain.ask_question(question)
            response_time = time.time() - start_time
            
            response_text = answer.answer
            
            # Analizar URLs en la respuesta
            # Buscar URLs de assetplan.cl
            url_pattern = r'https://www\.assetplan\.cl/[^\s\)]*'
            found_urls = re.findall(url_pattern, response_text)
            
            # Buscar patrones de citaci√≥n
            citation_patterns = [
                r'URL:',
                r'https://',
                r'assetplan\.cl',
                r'Ver propiedad'
            ]
            
            citation_found = any(re.search(pattern, response_text, re.IGNORECASE) 
                               for pattern in citation_patterns)
            
            # Mostrar respuesta
            print(f"üí¨ {response_text}")
            print(f"üîó URLs encontradas: {len(found_urls)}")
            if found_urls:
                print(f"   URLs: {found_urls[:2]}...")  # Mostrar las primeras 2
            
            print(f"üìã Citaci√≥n detectada: {'‚úÖ S√ç' if citation_found else '‚ùå NO'}")
            print(f"‚è±Ô∏è {response_time:.2f}s | üéØ {answer.confidence:.2f}")
            
            # Evaluaci√≥n espec√≠fica para URLs
            if len(found_urls) > 0 and citation_found:
                status = "‚úÖ PERFECTO"
            elif citation_found:
                status = "üü° PARCIAL"
            else:
                status = "‚ùå SIN URLs"
            
            print(f"üèÜ Estado: {status}")
            print("-" * 55)
            
            results.append({
                'question': question,
                'urls_found': len(found_urls),
                'citation_found': citation_found,
                'time': response_time,
                'status': status,
                'full_urls': found_urls
            })
        
        # Resumen de citaci√≥n
        print(f"\nüìä RESUMEN CITACI√ìN DE URLs:")
        print("=" * 55)
        
        perfect = sum(1 for r in results if "PERFECTO" in r['status'])
        partial = sum(1 for r in results if "PARCIAL" in r['status'])
        no_urls = sum(1 for r in results if "SIN URLs" in r['status'])
        
        total_urls = sum(r['urls_found'] for r in results)
        avg_time = sum(r['time'] for r in results) / len(results)
        citation_rate = sum(1 for r in results if r['citation_found']) / len(results)
        
        print(f"‚úÖ Perfectas: {perfect}/{len(results)}")
        print(f"üü° Parciales: {partial}/{len(results)}")  
        print(f"‚ùå Sin URLs: {no_urls}/{len(results)}")
        print(f"üîó Total URLs citadas: {total_urls}")
        print(f"üìä Tasa de citaci√≥n: {citation_rate*100:.1f}%")
        print(f"‚è±Ô∏è Tiempo promedio: {avg_time:.2f}s")
        
        # Mostrar URLs √∫nicas encontradas
        all_urls = []
        for r in results:
            all_urls.extend(r['full_urls'])
        unique_urls = list(set(all_urls))
        
        if unique_urls:
            print(f"\nüîó URLs √∫nicas citadas ({len(unique_urls)}):")
            for url in unique_urls[:3]:  # Mostrar las primeras 3
                print(f"   {url}")
            if len(unique_urls) > 3:
                print(f"   ... y {len(unique_urls)-3} m√°s")
        
        # Evaluaci√≥n final del requisito
        if perfect >= 3 and total_urls >= 5:
            print(f"\nüéâ ¬°REQUISITO CUMPLIDO!")
            print("‚úÖ Las URLs originales se citan correctamente")
            print("‚úÖ Cumple con el coding challenge")
        elif perfect + partial >= 4:
            print(f"\nüü° Citaci√≥n mayormente correcta")
            print("‚ö†Ô∏è Algunas respuestas podr√≠an mejorar la citaci√≥n")
        else:
            print(f"\n‚ùå Requisito no cumplido")
            print("üîß Necesita ajustes en la citaci√≥n de URLs")
        
        return perfect >= 2
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # Configurar logging m√≠nimo
    import logging
    logging.basicConfig(level=logging.WARNING)
    
    success = test_url_citation()
    
    if success:
        print(f"\nüí° Sistema listo para coding challenge:")
        print(f"   - URLs originales citadas ‚úÖ")
        print(f"   - Respuestas concisas ‚úÖ")
        print(f"   - Funcionamiento anti-overthinking ‚úÖ")
    else:
        print(f"\nüîß Para mejorar citaci√≥n:")
        print(f"   - Verificar que el contexto incluya URLs")
        print(f"   - Ajustar prompt si es necesario")
    
    sys.exit(0 if success else 1)