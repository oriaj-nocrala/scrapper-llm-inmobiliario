name: 🚀 CI/CD Pipeline - Scrapper LLM Inmobiliario

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # ANÁLISIS DE CÓDIGO Y LINTING
  # ============================================================================
  code-quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pytest-cov
          pip install -r requirements.txt

      - name: 🎨 Check code formatting (Black)
        run: |
          black --check --diff .
        continue-on-error: true

      - name: 📏 Check import sorting (isort)
        run: |
          isort --check-only --diff .
        continue-on-error: true

      - name: 🔍 Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🔎 Type checking with mypy
        run: |
          mypy src/ --ignore-missing-imports
        continue-on-error: true

  # ============================================================================
  # TESTS UNITARIOS Y DE INTEGRACIÓN
  # ============================================================================
  tests:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        test-type: ['unit', 'integration', 'functional']
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 🗂️ Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov pytest-xdist
          pip install -r requirements.txt

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              pytest tests/ -v -k "not integration and not functional" --cov=src --cov-report=xml
              ;;
            "integration")
              pytest tests/ -v -k "integration" --cov=src --cov-report=xml --cov-append
              ;;
            "functional")
              pytest tests/ -v -k "functional" --cov=src --cov-report=xml --cov-append
              ;;
          esac

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-type }}
          name: codecov-${{ matrix.python-version }}-${{ matrix.test-type }}

  # ============================================================================
  # TESTS DE SEGURIDAD
  # ============================================================================
  security-tests:
    name: 🛡️ Security Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔒 Run security checks with bandit
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: 🔍 Run safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # ============================================================================
  # CONSTRUCCIÓN Y TESTS DE DOCKER
  # ============================================================================
  docker-tests:
    name: 🐳 Docker Build & Tests
    runs-on: ubuntu-latest
    needs: [tests, security-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        run: |
          docker build -t scrapper-llm:test .

      - name: 🧪 Test Docker container
        run: |
          # Crear directorios necesarios
          mkdir -p data logs cache ml-models
          
          # Test básico del contenedor
          docker run --rm -d --name scrapper-test \
            -v $(pwd)/data:/app/data \
            -v $(pwd)/logs:/app/logs \
            -v $(pwd)/cache:/app/cache \
            -v $(pwd)/ml-models:/app/ml-models \
            scrapper-llm:test
          
          # Esperar que el contenedor inicie
          sleep 10
          
          # Verificar que el contenedor está corriendo
          docker ps | grep scrapper-test
          
          # Test de health check
          docker exec scrapper-test /app/docker-entrypoint.sh health
          
          # Detener contenedor
          docker stop scrapper-test

      - name: 🧪 Run tests in Docker
        run: |
          docker run --rm \
            -v $(pwd)/tests:/app/tests \
            scrapper-llm:test test

      - name: 📊 Test Docker Compose
        run: |
          # Test de docker-compose
          docker-compose -f docker-compose.yml config
          
          # Test de docker-compose dev
          docker-compose -f docker-compose.dev.yml config

  # ============================================================================
  # ANÁLISIS DE CÓDIGO CON HERRAMIENTAS INTERNAS
  # ============================================================================
  code-analysis:
    name: 📈 Internal Code Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 Run smart code analyzer
        run: |
          python tools/code_analysis/smart_code_analyzer.py --output smart-analysis.json
        continue-on-error: true

      - name: 📊 Run quality scorer
        run: |
          python tools/code_analysis/quality_scorer.py --output quality-report.json
        continue-on-error: true

      - name: 🧠 Run God Class detection
        run: |
          python tools/god_class_refactor/god_class_refactor_guide.py --scan-project --output god-class-report.json
        continue-on-error: true

      - name: 📤 Upload analysis reports
        uses: actions/upload-artifact@v3
        with:
          name: code-analysis-reports
          path: |
            smart-analysis.json
            quality-report.json
            god-class-report.json

  # ============================================================================
  # CONSTRUCCIÓN Y PUSH DE IMAGEN
  # ============================================================================
  build-and-push:
    name: 🏗️ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [tests, docker-tests, security-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏷️ Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # ============================================================================
  # DESPLIEGUE A STAGING
  # ============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image }}"
          # Aquí agregarías los comandos específicos de despliegue
          # Por ejemplo: kubectl, terraform, ansible, etc.

      - name: 🧪 Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Aquí agregarías smoke tests para verificar el despliegue
          # curl -f https://staging.scrapper-llm.com/health

  # ============================================================================
  # DESPLIEGUE A PRODUCCIÓN
  # ============================================================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image }}"
          # Aquí agregarías los comandos específicos de despliegue a producción

      - name: 🧪 Run production smoke tests
        run: |
          echo "Running smoke tests on production..."
          # curl -f https://scrapper-llm.com/health

      - name: 📊 Update deployment status
        run: |
          echo "Deployment completed successfully!"

  # ============================================================================
  # LIMPIEZA Y NOTIFICACIONES
  # ============================================================================
  cleanup:
    name: 🧹 Cleanup & Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: 🧹 Cleanup old images
        run: |
          echo "Cleaning up old Docker images..."
          # Aquí agregarías comandos para limpiar imágenes antiguas

      - name: 📧 Send notification
        if: failure()
        run: |
          echo "Sending failure notification..."
          # Aquí agregarías notificaciones (Slack, email, etc.)

      - name: 📊 Update badges
        run: |
          echo "Updating README badges..."
          # Aquí actualizarías badges de estado